from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import asyncio
import random
from datetime import datetime, timedelta
import json
import os

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = '7682840058:AAGqMGgkFul-BsCwaR80R1cOR2hHUV8RK_U'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_data = {}

# –ü—Ä–æ–º–æ–∫–æ–¥—ã –∏ –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
promo_codes = {
    '2134eg': {'stars': 15, 'activations': 30, 'used': 0},
    '230km': {'stars': 5, 'activations': 50, 'used': 0},
    'starsss2': {'stars': 15, 'activations': 52, 'used': 0}
}

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'users_data.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    global users_data, promo_codes
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            users_data = data.get('users', {})
            promo_codes = data.get('promos', promo_codes)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data():
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump({
            'users': users_data,
            'promos': promo_codes
        }, f, ensure_ascii=False, indent=2)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard():
    main_menu = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="‚≠ê –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã"),
                KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
            ],
            [
                KeyboardButton(text="‚ìÇÔ∏è –ü—Ä–æ–º–∫–æ–¥"),
                KeyboardButton(text="üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å")
            ],
            [
                KeyboardButton(text="üì£ –†–µ—Ñ —Å—Å—ã–ª–∫–∞"),
                KeyboardButton(text="‚û°Ô∏è –í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã")
            ]
        ],
        resize_keyboard=True
    )
    return main_menu

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def init_user(user_id, username):
    if str(user_id) not in users_data:
        users_data[str(user_id)] = {
            'username': username,
            'balance': 0,
            'referrals': 0,
            'clicks_today': 0,
            'last_click_date': '',
            'last_bonus_date': '',
            'used_promos': [],
            'referred_by': None
        }
        save_data()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or str(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_new_user = user_id not in users_data
    
    init_user(user_id, username)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    args = message.text.split()
    if len(args) > 1 and is_new_user:
        ref_id = args[1]
        if ref_id != user_id and ref_id in users_data and users_data[user_id]['referred_by'] is None:
            users_data[user_id]['referred_by'] = ref_id
            users_data[ref_id]['referrals'] += 1
            users_data[ref_id]['balance'] += 2
            save_data()
            try:
                await bot.send_message(
                    ref_id,
                    f"üì≤ –ü–æ —Ç–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è\n@{username}\n\n–ù–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ 2 ‚≠êÔ∏è"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {e}")
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! \n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã"
@dp.message(lambda message: message.text == "‚≠ê –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã")
async def earn_stars(message: types.Message):
    user_id = str(message.from_user.id)
    current_date = datetime.now().strftime('%Y-%m-%d')
    
    if users_data[user_id]['last_click_date'] != current_date:
        users_data[user_id]['clicks_today'] = 0
        users_data[user_id]['last_click_date'] = current_date
    
    if users_data[user_id]['clicks_today'] < 10:
        users_data[user_id]['balance'] += 0.2
        users_data[user_id]['clicks_today'] += 1
        save_data()
        await message.answer(
            f"‚úÖ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 0.2 ‚≠êÔ∏è!\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –∫–ª–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {10 - users_data[user_id]['clicks_today']}"
        )
    else:
        await message.answer("‚ùå –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∫–ª–∏–∫–æ–≤. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@dp.message(lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    user_id = str(message.from_user.id)
    user_data = users_data[user_id]
    await message.answer(
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_data['username']}\n\n"
        f"üìä –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {user_data['referrals']}\n\n"
        f"üè¶ –ë–∞–ª–∞–Ω—Å: {user_data['balance']} ‚≠êÔ∏è"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"
@dp.message(lambda message: message.text == "üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å")
async def daily_bonus(message: types.Message):
    user_id = str(message.from_user.id)
    current_date = datetime.now().strftime('%Y-%m-%d')
    
    if users_data[user_id].get('last_bonus_date') != current_date:
        bonus = random.randint(2, 15)
        users_data[user_id]['balance'] += bonus
        users_data[user_id]['last_bonus_date'] = current_date
        save_data()
        await message.answer(
            f"üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n"
            f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: {bonus} ‚≠êÔ∏è\n"
            f"–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –±–æ–Ω—É—Å–æ–º!"
        )
    else:
        next_bonus = datetime.now() + timedelta(days=1)
        next_bonus = next_bonus.replace(hour=0, minute=0, second=0, microsecond=0)
        hours_left = (next_bonus - datetime.now()).seconds // 3600
        minutes_left = ((next_bonus - datetime.now()).seconds % 3600) // 60
        
        await message.answer(
            f"‚è≥ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –±–æ–Ω—É—Å!\n"
            f"–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: {hours_left}—á {minutes_left}–º–∏–Ω"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ—Ñ —Å—Å—ã–ª–∫–∞"
@dp.message(lambda message: message.text == "üì£ –†–µ—Ñ —Å—Å—ã–ª–∫–∞")
async def ref_link(message: types.Message):
    user_id = str(message.from_user.id)
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    ref_link = f"https://t.me/{bot_username}?start={user_id}"
    
    await message.answer(
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"{ref_link}\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {users_data[user_id]['referrals']} —á–µ–ª.\n"
        f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö: {users_data[user_id]['referrals'] * 2} ‚≠êÔ∏è\n\n"
        f"‚ÑπÔ∏è –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 2 ‚≠êÔ∏è"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã"
@dp.message(lambda message: message.text == "‚û°Ô∏è –í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã")
async def withdraw_stars(message: types.Message):
    user_id = str(message.from_user.id)
    balance = users_data[user_id]['balance']
    
    await message.answer(
        f"üí´ –í–∞—à —Ç–µ–∫—É—â–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance} ‚≠êÔ∏è\n\n"
        f"‚ö†Ô∏è –í—ã–≤–æ–¥ –∑–≤–µ–∑–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
        f"üì¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: https://t.me/slavik_stars"
    )

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_data()

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())